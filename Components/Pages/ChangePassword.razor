@page "/change-password"
@using BlazorApp.Services
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="mt-5 d-flex justify-center" Style="width: 800px; height: auto;">
    <MudCard Class="rounded-lg shadow-xl" Elevation="12" Style="padding: 30px; width: 100%; height: 500px;">
        <MudCardHeader>
            <MudText Typo="Typo.h4" Class="mb-0">Change Password</MudText>
        </MudCardHeader>
        <MudCardContent Class="p-6">
            <MudStack Spacing="4">
                <MudTextField T="string" @bind-Value="currentPassword" Label="Current Password" Variant="Variant.Outlined" InputType="InputType.Password" Required />
                <MudTextField T="string" @bind-Value="newPassword" Label="New Password" Variant="Variant.Outlined" InputType="InputType.Password" Required />
                <MudTextField T="string" @bind-Value="confirmPassword" Label="Confirm New Password" Variant="Variant.Outlined" InputType="InputType.Password" Required />
            </MudStack>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-end p-4 gap-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleChangePassword">Change Password</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="Back">Back</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private string currentPassword = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;

    private async Task HandleChangePassword()
    {
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            Snackbar.Add("All fields are required.", Severity.Error);
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("New password and confirmation do not match.", Severity.Error);
            return;
        }

        try
        {
            var success = await AuthService.ChangePassword(currentPassword, newPassword);
            if (success)
            {
                Snackbar.Add("Password updated successfully!", Severity.Success);
                NavigationManager.NavigateTo("/user-profile");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to change password: {ex.Message}", Severity.Error);
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/user-profile");
    }
}
